job('task6_job1'){
description('It helps to pull the data from github when developer push their code to github by using some triggers.')
scm{
github('ashwani7273/devopsal_task6')
}
triggers {
scm('* * * * *')
upstream('seed_job','SUCCESS')
}
steps {
       shell(''' if sudo cd /;ls | grep devopsal_task6
                 then
                 sudo cp -rvf * /devopsal_task6
                 else
                 sudo mkdir /devopsal_task6
                 sudo cp -rvf * /devopsal_task6
                 fi
             ''')
    }
}
       
job('task6_job2'){
description('Run the environment to deploy code.')

triggers {
upstream('task6_job1','SUCCESS')
}
steps{
      shell('''  sudo cd /devopsal_task6
                 if ls | grep ".php"
                 then
                 sudo kubectl delete all --all
                 sudo kubectl create -f webDeployment.yml
                 sudo kubectl create -f webService.yml
                 sudo sleep 20
                 status=$(sudo kubectl get pods -o 'jsonpath={.items[0].metadata.name}')
                 sudo kubectl get all
                 sudo kubectl cp  /devopsal_task6/hello.php $status:/var/www/html/
                 fi
            ''')
}
}
       
job('task6_job3'){
description('App working status')
triggers {
upstream('task6_job2','SUCCESS')
}
steps{
      shell(''' if sudo  kubectl get deploy | grep web-deploy
                then
                echo "Web Server running"
                else
                echo "Server not running"
                fi
            ''')

}
}
job('task6_job4'){
description('OS working status')
triggers {
upstream('task6_job3','SUCCESS')
}
publishers {
extendedEmail {
recipientList('ashwani2399@gmail.com')
defaultSubject('Webserver Issue')
defaultContent('''Hey Developer,
Your deployment is facing some issue so kindly troubleshoot it as quick as you can''')
contentType('text/plain')
triggers {
beforeBuild()
stillUnstable {
subject('Subject')
content('Body')
sendTo {
developers()
requester()
culprits()
}
}
}
}
}
steps{
      shell(''' if sudo  kubectl get deploy | grep web-deploy
                then
                echo "Web Server running"
                exit 0
                else
                exit 1
                fi
            ''')
}
}

buildPipelineView('DevOps Assembly Lines Task6') {
filterBuildQueue()
filterExecutors()
title('Task6')
displayedBuilds(1)
selectedJob('seed_job')
alwaysAllowManualTrigger()
showPipelineParameters()
refreshFrequency(60)
}